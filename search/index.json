[{"content":"","href":"/","title":"abekoh's tech note"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/tags/ddd/","title":"DDD"},{"content":"","href":"/tags/github-actions/","title":"GitHub Actions"},{"content":"ドメインモデルの図を複数人、エンジニア・ドメインエキスパート間で共有するにあたって、 やり方はいろいろ考えられますが、\n 差分がわかりやすい バージョン管理ができる  という点からやはりGitで管理できると嬉しいと思います。\nGitで管理しやすいフォーマットとして、DSLから図を自動生成してくれるPlantUMLが使いやすく定番です。 ドメインモデルについては下図のようにオブジェクト図で書けるとよいかと思います。\n(『実践ドメイン駆動設計』 P.356, 図10-7をもとに作成)\nこのPlantUMLによるドメインモデルの管理をGitHubのPR上で効率行えるようにするための、Github Actionsのテンプレを開発しMarketplaceに公開しました。\nGenerate and Commit PlantUML Diagrams · Actions · GitHub Marketplace\n使い方などはREADMEを参考に。使い勝手は以下のサンプルPRを見ていただければわかりやすいと思います。\nExample by abekoh · Pull Request #33 · abekoh/commit-plantuml-action\n.pumlファイルに差分が生じたとき、同じところに.pngとして画像が生成され、コミットされます。\nさらにenableReviewCommentを有効にすれば、生成された図のリンクとプレビューがコメントに投稿されます。 Beforeを展開して古い図との差分も確認可能です。\n毎回リンクをたどってレビューを行う必要がなく、使い勝手よく扱えると思います。\n注意点としては、PlantUMLが依存しているgraphvizの影響でライセンスがGPLとなっている点です…\nこのあたりのPlantUMLの別実装を使ってより緩いライセンス使えないか、模索していきたいところ。\n","href":"/post/plantuml-action/","title":"GitHub Actions + PlantUMLでドメインモデルの管理を楽にする"},{"content":"","href":"/tags/plantuml/","title":"PlantUML"},{"content":"","href":"/post/","title":"Posts"},{"content":"","href":"/tags/","title":"Tags"},{"content":"","href":"/categories/tech/","title":"tech"},{"content":"ドメイン駆動設計 Advent Calendar 2020 に参加しました。\nトランザクションスクリプトなシステムをもとに、Cleanなシステムを構築する - Qiita\n","href":"/post/advent-calendar-2020-ddd/","title":"[Qiita] トランザクションスクリプトなシステムをもとに、Cleanなシステムを構築する"},{"content":"","href":"/tags/clean-architecture/","title":"Clean Architecture"},{"content":"","href":"/tags/qiita/","title":"Qiita"},{"content":"社内LT会の好評だったところ一部抜粋。\nDDD関連の本を読み漁って、それぞれの感想一言メモと、どの順で読んだらいいか考えてみたやつを紹介。\n戦略的設計と戦術的設計 この記事でDDDの内容にはちゃんと触れないけどこの点だけ説明。\nDDDの考え方、パターンは数あれど、それらは 「戦略的設計」と「戦術的設計」に分類することができる。 関連書籍はこのどちらかに偏っていることが多い。\n戦略的設計 \u0026hellip; チームで使うパターン。よりマネジメント向き。\n戦術的設計 \u0026hellip; テクニカルなパターン。具体的なクラス設計とか。\nお硬めの2冊 エリック・エヴァンスのドメイン駆動設計 原著: 2003年、訳書: 2011年発行\nEvans本。原著。古い箇所もあるけどすべてが詰まっている。\nレビューなどで「抽象的でわかりにくい」ってコメントが多くて身構えていたけど、思ってたより具体的な例も出てきて楽しめた。 (ある程度DDDに関する知識蓄えてからってのが大きいけど。)\n実践ドメイン駆動設計 原著: 2013年、訳書: 2015年発行\nIDDD本。Evans本からより実践方面に落とし込んだもの。戦術的設計が多め。\nEvans本にはない概念も登場する。(ドメインイベントあたり)\n「Evans本よりこの本から読んだほうがとっつきやすい」ってコメントがいくつかあったのでここから入ったけど、Evans本の内容が前提として扱われているので割と辛い。\nやわらかめ3冊 わかる！ドメイン駆動設計 ～もちこちゃんの大冒険～ 2016年発行\n同人誌。ほぼ戦略的設計のみ扱う。\nEvans本、IDDD本を引用しつつゆるふわに解説されててとっつきやすい。\nドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本 2020年発行\n今年出たばかりの本。戦術的設計中心。\nDDDで使われるパターンをいきなりコードで説明する感じで、具体的でイメージがすぐに掴める。\n初学者の「DDD難しそう辛そう」というイメージを解きほぐすような解説がとてもよかった。 C#だけどJava知ってたら違和感ない内容だった。\n「実践ドメイン駆動設計」から学ぶDDDの実装入門 2019年発行\nIDDD本の副読本。もともとCodeZineの連載物で、Amazonでオンデマンドで印刷できるやつ。 構成はIDDD本と全く同じで、一緒に読み進めるとよさそう。\n読み順について 読みやすさ、扱う内容でマッピングして、個人的おすすめな読み順をつけるとこんな感じ。\nドメイン駆動設計入門がとにかくわかりやすく、「DDD頑張れそう」って勇気もらえるからここからがオススメ。戦術的設計に偏ってるので、その後はもちこちゃんで戦略的設計を掴む。\nそこからEvans本→IDDD本(副読本も一緒がいいかも？)という流れで、頭悩ませながら読むのがよいんじゃないかなって思う。\nまとめ これで僕は完全に理解しました。エンジニア的な意味でです。\n業務などでの実践面はまだまだなのでﾁｮｯﾄﾃﾞｷﾙようになりたいです。\n","href":"/post/ddd-books/","title":"「ドメイン駆動設計」関連書籍の紹介・オススメの読み順"},{"content":"","href":"/tags/firebase/","title":"Firebase"},{"content":"","href":"/tags/javascript/","title":"Javascript"},{"content":"","href":"/tags/nuxt.js/","title":"Nuxt.js"},{"content":"","href":"/tags/vue.js/","title":"Vue.js"},{"content":"3月ごろからあつ森にハマり、それから自粛期間に入りまして。 お家時間増えたし何か個人開発したい！と思い、思いついたのが「あつ森のアイテムをWeb上でらくらくに検索したりできるサービス」でした。\n1ヶ月くらいかけてコツコツと作りあげたものの、公開しよう！ってタイミングで結局諦めることにしました。 実際どんなもの作ったか、公開やめた理由、どんな学びがあったのか、成仏のためにも記事にしようと思います。\nどんなサービス？ あつ森に出てくる家具、服などのアイテムを簡単に検索でき、そのバリエーションや入手方法などをチェックすることができます。\nデモはこちら。 左側のメニューから、キーワード検索でアイテムを探すことができます。しぼりこみ検索では「ジョニーからもらえる家具」といった条件で検索ができます。 またマイリスト機能もつけていまして、ログインしていたら欲しい物を管理、公開することが可能になってます。\nレスポンシブなので、スマホにも対応しています。 なぜ公開をやめたか やっぱり著作権的にアウトだと判断し、お蔵入りにすることにしました。\n多くのあつ森攻略サイトで家具一覧ページが存在していたり、某ポケモン攻略サイトが公式からOKもらっていたりと前例があるので、 1ファンサイトとして公開してもいいかなと思ってましたが…\n 公式の画像バリバリ使ってしまってる点は、二次利用として「常識の範囲」を超えている点 「ゲーム買わなくてもこれ見たら満足してしまう」という不利益を与えてしまう可能性がある点  など、不安が残る点がクリアにできず。 個人的には任天堂の大ファンなので、変に迷惑かけるのも嫌でして。あくまで個人範囲で楽しむものまでに留めることにしました。\n学びなど 諦めたものの、Webアプリをしっかり個人開発したのが初だったので多くの学びがありました。 その学びを備忘録的にメモしておこうと思います。\n今回つかった技術まわりは次の通りです。\n フロント  Nuxt.js  SPAモード not TypeScript   Vuetify   データまわり  Python (アイテムデータの収集、整形、DB登録など)   インフラ  Firebase  Authentication Cloud Firestore Hosting (Functions)   Algolia (全文検索エンジン)    以下、感想など\nVuetifyがつよい Vue Material Design Component Framework — Vuetify.js\nデザインフレームワークとして今回Vuetifyを選んだのですが、強力すぎてビビりました。 CSSを全く書くことなく、HTMLテンプレ書くだけでいい感じの見た目になります。\nGoogleの提唱するマテリアルデザインに沿ったものなので、見た目は最近のGoogleサービスっぽくなります。 実際レイアウトサンプルもGoogleライクなのが挙げられてますね。\n加えて、多く意識せずともレスポンシブになります。 当初はPCブラウザサイズでしか動作確認してませんでしたが、ふとDeveloper Toolsでスマホサイズにしてみてもほとんど崩れませんでした。\n(pxで大きめなwidth指定していても、勝手にmax-width設定されたりしてるっぽい)\nきちんとレスポンシブを意識するにも、「スマホならこれくらい、タブレットならこれくらい」とサクッと設定可能です。 例えばGridsを採用するとき、画面を水平に12ブロックに分けたものと考えるので\n「スマホ以下だと画面いっぱい、それ以上は半分くらい」にレイアウトしたいときは\n\u0026lt;v-row\u0026gt; \u0026lt;v-col cols=\u0026#34;12\u0026#34; sm=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;v-card /\u0026gt; \u0026lt;/v-col\u0026gt; \u0026lt;/v-row\u0026gt; と、デフォルトでは画面いっぱいcols=\u0026quot;12\u0026quot;、スマホサイズより大きければsm=\u0026quot;6\u0026quot;という設定が反映されます。 これだけでいい感じにスマホ対応できるのでとにかく楽しいですね。\n考えなしにSSRやるとハマる 当初はよく考えず「NuxtだしSSR流行ってるしそれでいくかー」という気分でSSRで作ってましたが、ハマりました。\n今回Firebase Authenticationの匿名認証を使ってたんですが、それをNuxtのmiddlewareで行うと、 「サーバサイド側で認可されているもののクライアントサイドで認可されておらず、ページ遷移なしで要認証なCloud Firestoreにアクセスできない」といった事態に。\n結局SSRモードでやりたいことの実現が難しそうで、SPAモードに切り替えることにしました。 行ってる処理について「サーバサイドやる」「クライアントでやる」きちんと意識して開発するのが大切ですね。\nデータ周りはFirebaseのCloud Firestore 「サーバサイドエンジニアいらなくなる」という謳い文句？でよく耳にしてたFirebaseを初めて触ってみました。\n今回サーバサイド側に求めるものはCRUD操作程度だったので、DBはCloud Firestoreで事足りました。 データ構造は、雑に言うとJSONをうまく拡張したものという感じ。 公式ドキュメントのみでほぼ理解できました。\nかなり限定的な用途かも？ですが、こう「かゆいところに手が届かない」って点も。\nCloud Firestoreの複合インデックス設定で、Arrayフィールドは1つしか設定できない\nあつ森家具に紐づくラベルで、\u0026ldquo;入手方法\u0026rdquo;・\u0026ldquo;セット\u0026quot;は複数紐づくことがあるので、Array形式としていました。しかしインデックスは一方しかつけられないので、「\u0026ldquo;入手方法\u0026quot;では検索可能だが\u0026quot;セット\u0026quot;では検索できない」と機能落ちさせるしかありませんでした。\n公式ドキュメントにも注意書きされてますね。\n全文検索は他サービスに頼るしかない\n現状全文検索機能はFirebase内で完結できません。 公式ドキュメントでも案内されている通り、Algolia使うのが一つの選択肢だそうです。\nAlgolia\n実際使ってみましたが、クライアントも多言語対応で超簡単でした。 (\u0008アイテムデータのみ検索対応だったので、Pythonで登録、JSで検索のみで使いました。)\nひらがな・カタカナ両対応させるべく、こんな風にそれぞれでインデックス登録しました。 ホスティングもFirebaseで 公開はSSRの場合はHosting + Functionsで。次の記事が参考になりました。\nSSRモードのNuxt を Firebaseにホストするまでの手順 - Qiita\nただ前述の通り途中でSPAに切り替え、Hostingだけにしました。\n認証認可もFirebase Firebase Authentication、めっちゃ簡単ですね。特にGoogleログインに関しては設定一瞬です。 またセキュリティまわりを整えるため、匿名認証も簡単に設定できます。\n今回は認可を受けたユーザーのみ、Cloud Firestoreのアイテムデータにアクセスできる、という設定にしたかったので Nuxt.jsのmiddlewareにて、次のように「認可されていなければ必ず匿名認証させる」という風にしました。\nimport { auth } from \u0026#39;~/plugins/firebase\u0026#39; export default async function({ store }) { // storeから自分のユーザー情報取得  const user = store.getters[\u0026#39;users/getOwnUser\u0026#39;] // 保存されていなければ匿名認証、その結果をstoreに保存  if (!user) { const result = await auth.signInAnonymously() await store.dispatch(\u0026#39;users/login\u0026#39;, result.user) } } Nuxtの追加モジュールが素晴らしい ちょっとこういう機能つけたいっていうときのモジュールが豊富に用意されています。\n例えば、「PWA対応させてスマホアプリっぽくしたいな」ってときはこちら入れて少し設定するだけ\n⚡ Nuxt PWA\n「サイトマップ勝手に生成してほしい」ってときはこちら\nnuxt-community/sitemap-module: Sitemap Module for Nuxt.js\nBASIC認証設定しておきたいってときはこちら\npotato4d/nuxt-basic-auth-module: Provide basic auth your Nuxt.js application\nいろいろサボれるので圧倒的感謝です。\nTypeScript入れとけばよかった 完全一人で開発してたとはいうものの、途中から脳内で「ここはこんな\u0008Object入ってくるから〜」と思考巡らせて書いてました。 多分放置して半年後はいじるのに苦労すると思います。\nそもそも入れなかった理由は、以前JSもろくに触らないままTypeScript書こうとして、どこまでがJSの機能か見分けがつかなくなり苦戦したので、もうちょいJSに慣れようという思いがあったからです。 最近はようやくJS, ES6, Node.jsの記法の分別がついてきたので、TypeScript再チャレンジしたいと思います。\n利用規約、プライバシーポリシー これらも用意まではしました。こちらサイトを参考に、必要に応じて追加・削除してみました。\nWebサイトの利用規約（無料テンプレート・商用利用可）\n書いていくともうすぐ公開だ！とワクワクする反面、個人情報管理について緊張感が出てきます。 Firebaseで簡単になんでもできてしまう分、ほんとに大丈夫？ってなりますね。Cloud Firestoreのrules設定を何度も見直しました。\nまとめ 次はきちんと公開できるものを、よりクリーンなコードで作れたらと思いました。 そのためにもまずは、健全な(? )アイデアがほしいですね。 引き続きフロントまわりは勉強続けていきたいと思います。\n","href":"/post/atsumori-app/","title":"あつ森のアイテムカタログサービスつくった、けれど公開はやめた話"},{"content":"","href":"/tags/%E5%80%8B%E4%BA%BA%E9%96%8B%E7%99%BA/","title":"個人開発"},{"content":"","href":"/tags/google-maps/","title":"Google Maps"},{"content":"Google Mapsの場所情報が使えるPlaces APIを使ったアプリケーションを作ってみたく、実装ためしたメモ。\nGoogle Maps API 単にGoogle Maps APIといってもその用途によって、ドキュメントや料金体系が別れている。\nドキュメント一覧はここで、目的に合ったAPIを選ぶ。 https://developers.google.com/maps/documentation\n料金についてはここ。記事を書いている時点で、モバイル向けマップ表示は無料だったり、ある道路の制限速度を取得するAPIは1000件あたり$20と細かい。1ヶ月$200までは無料で使える。\nhttps://cloud.google.com/maps-platform/pricing/\n今回はPlaces API for Webを使ってみる。指定した場所周辺の飲食店一覧や、その飲食店のレビュー情報なんかが取得できる。\nPlaces APIの中でも、場所を探す、場所の詳細情報を取得する、その周辺の写真を取得する、で料金体系が違うので注意。\nAPIの有効化 ここに書いてあるとおり順にやってく。\nhttps://developers.google.com/places/web-service/get-api-key\n手順通り進めたら、API Keyが発行できる。このキーをクエリパラメータに含めるなどして扱う。\n発行できたらcurlつかってテスト。\ncurl \u0026#34;https://maps.googleapis.com/maps/api/place/nearbysearch/json?key={replace your API Key}\u0026amp;location=35.6812362,139.7649361\u0026amp;radius=100\u0026amp;language=ja\u0026amp;keyword=ramen\u0026#34; 上記はNearby Searchを使って、東京駅周辺半径100mで、キーワード\u0026quot;ramen\u0026quot;でお店を探すサンプル。\nドキュメントに書かれているとおり、API Keyには利用元の制限をかけるべき。IPアドレスやリファラなどで設定可能。\n実装 Java向け公式のクライアントがあったのでそれ利用。\nhttps://github.com/googlemaps/google-maps-services-java\n依存を追加。\n// build.gradle.kts dependencies { implementation(\u0026#34;com.google.maps:google-maps-services:0.11.0\u0026#34;) } 使い方は次のような感じ。\n// https://github.com/googlemaps/google-maps-services-java/blob/master/README.md より GeoApiContext context = new GeoApiContext.Builder() .apiKey(\u0026#34;AIza...\u0026#34;) .build(); GeocodingResult[] results = GeocodingApi.geocode(context, \u0026#34;1600 Amphitheatre Parkway Mountain View, CA 94043\u0026#34;).await(); Gson gson = new GsonBuilder().setPrettyPrinting().create(); System.out.println(gson.toJson(results[0].addressComponents)); GeoApiContextにAPI Keyを詰めてインスタンス化、それをGeocodingApi.geocode()といったstatic methodの引数に詰めて実行できる。\nSpringで実装するとき、このcontextをどう扱えばよいか。やっぱりDIしてしまうのが後々別のクラスでもAPI呼び出したいってとき便利なので、Bean登録する。\n@Configuration class GeoApiConfig { @Bean fun createGeoApiConfig(@Value(\u0026#34;\\${google.api.api-key}\u0026#34;) apiKey: String): GeoApiContext { return GeoApiContext.Builder() .apiKey(apiKey) .build() } } application.ymlやコマンドライン引数などでgoogle.api.api-keyを設定しておくこと。\nそして実際に使うところはこのような感じ。Kotlinだと@Autowiredを省略できたりする。\n@Service class PlaceApiService(private val context: GeoApiContext) { companion object { const val langCode = \u0026#34;ja\u0026#34; } override fun getLocationFromKeyword(keyword: String): PlacesSearchResponse { val request = PlacesApi .textSearchQuery(context, keyword) .language(langCode) try { return request.await() } catch (e: Exception) { throw RuntimeException(\u0026#34;Some error occured.\u0026#34;) } } } 勿論エラーハンドリングはもう少し考えたほうなおよし。\nまとめ Spring向けってわけではないJavaライブラリを扱うとき、うまくBean登録してあげるのが肝かなーと思った次第です。\n","href":"/post/google-maps-api-with-spring/","title":"Google Maps APIをSpringで使ってみる"},{"content":"","href":"/tags/java/","title":"Java"},{"content":"","href":"/tags/kotlin/","title":"Kotlin"},{"content":"","href":"/tags/spring/","title":"Spring"},{"content":"","href":"/tags/fish/","title":"fish"},{"content":"ちょっとしたコード編集とかだったらターミナル上だけで完結させるのが好きでして。 効率よくプロジェクト選択、そのまま編集したりしやすくなる prj というコマンドを自作しています。 また、これに加えて使いやすいように他にも設定盛り込んでます。\nなんだかんだ1年以上運用していて、満足しているのでアウトプットしておきます。\n環境 次のような環境が必要です\n Neovim  neovim-remote   tmux fish peco  Neovim,tmuxは必須ですが、fish,pecoはzsh,fzfに書き換えても良いと思います。 インストール方法はそれぞれリンク先を参照してください。\nデモ わかりにくいかもですが、次のような特徴をみせてます。\n prjで、ghqにより管理されたgitリポジトリをpecoをつかって選択 リポジトリを選択するとそのプロジェクト用のtmuxセッションが開かれ、カレントディレクトリがそのリポジトリ配下になる tmuxセッション内で、Neovimは1タブでしか開けない tmuxセッション内でもう一度prjを実行すると、別のプロジェクトも開ける  次の項でその実現方法を解説します。\n解説 prjコマンド ghqとpecoの連携についてはこちらの記事の考えをそのまま使っています。\nghq, peco, hubで快適Gitライフを手に入れよう！ - Qiita\nこの組み合わせによって、レポジトリ管理・選択が劇的に楽になります。 さらに小細工を入れてtmuxセッションを開くようにしました。\nprjコマンドはfish scriptで書いています。こんな感じ\n# prj.fish function prj -d \u0026#34;start project\u0026#34; # 引数が設定されていれば、それをpecoにわたす  if test (count $argv) -gt 0 set prjflag --query \u0026#34;$argv\u0026#34; end set PRJ_PATH (ghq root)/(ghq list | peco $prjflag) # プロジェクトが選択されなければ終了  if test -z $PRJ_PATH return end # プロジェクト名は 所有者/リポジトリ名 の形式。その名前に`.`を含む場合は`_`に置換  set PRJ_NAME (echo (basename (dirname $PRJ_PATH))/(basename $PRJ_PATH) | sed -e \u0026#39;s/\\./_/g\u0026#39;) # プロジェクトのtmuxセッションが存在しなければ作成  if not tmux has-session -t $PRJ_NAME tmux new-session -c $PRJ_PATH -s $PRJ_NAME -d tmux setenv -t $PRJ_NAME TMUX_SESSION_PATH $PRJ_PATH end # tmuxセッション外であればattach  if test -z $TMUX tmux attach -t $PRJ_NAME # tmuxセッション内であればswitch  else tmux switch-client -t $PRJ_NAME end end これでtmux連携が可能になりました。\nセッション内で開くNeovimを1つに セッション内で自分は複数タブを使い、一方でNeovim、一方でファイル確認、一方でサーバー起動とかやります。そうやってると、ついついNeovimを複数タブで開いてしまい、どこでどのファイルを編集していたかわからなくなります。\nそれを回避するために、neovim-remoteを採用しました。\nneovim-remoteを使うと、すでに起動してあるNeovimに開くファイルを追加する、といった動きをさせることができます。\nsocketファイルをわかりやすくプロジェクト名として/tmpに保存し、同プロジェクトで新たnvimするとnvr --remote-tab --servername /tmp/{プロジェクト名}で既存Neovimの新規タブとして開かれるようになります。\nnvimコマンドをfishでラッピングし実現しました。\n# nvim.fish function nvim -d \u0026#34;neovim wrapping\u0026#34; # tmuxセッション内でなければそのまま  if test -z $TMUX command nvim $argv else # /tmp/にtmuxセッションを保管  set socket_path /tmp/(echo (tmux display-message -p \u0026#39;#S\u0026#39;) | sed \u0026#39;s/\\//_/g\u0026#39; ) if test -S $socket_path # すでにソケットが存在してたらそれに接続  nvr --remote-tab --servername $socket_path $argv # 該当のnvimに移動  set session_id (tmux list-panes -F \u0026#39;#{session_id}\u0026#39;) set pane_ids (tmux list-panes -a -F \u0026#34;#{session_id},#{window_index},#{pane_index},#{pane_current_command}\u0026#34; | grep \u0026#34;^$session_id,.*,nvim\\$\u0026#34; | string split \u0026#39;,\u0026#39;) tmux select-window -t $pane_ids[2] \u0026amp;\u0026amp; tmux select-pane -t $pane_ids[3] else # ソケットがなければ作成して起動  command env NVIM_LISTEN_ADDRESS=$socket_path nvim $argv end end end cdコマンド空打ちでプロジェクトルートに移動 デモに記録していませんでしたが、これも便利なので紹介。\ntmuxセッション内でcd空打ちすると、homeではなくプロジェクトルートに移動するようにしています。\n例のごとく、fishでラッピング\n# cd.fish function cd --description \u0026#34;Change directory\u0026#34; if test -n \u0026#34;$TMUX\u0026#34; -a -z \u0026#34;$argv\u0026#34; set session_path (tmux show-environment | grep TMUX_SESSION_PATH | string replace \u0026#34;TMUX_SESSION_PATH=\u0026#34; \u0026#34;\u0026#34;) if test $session_path builtin cd $session_path return $status end end end 自分の設定では、標準のcd.fishをコピーしてきて書き加えたかたちにしています。\n設定全体 dotfilesを公開しているので、全体像はこちらから。今回のfishコマンドたちはconfig/fish/functionsに置いてます。\nabekoh/dotfiles\nただ完全に自分用で、使ってない機能、保守していないところもあるのであしからず。。\nまとめ fishでコマンド上書きでゴリ押しですが、使い勝手よくて気に入っています。 こういった作業改善、凝りだすと止まらなくなってしまうので危険です。。笑\n","href":"/post/prj-command/","title":"fish,tmux,neovim,ghq,pecoで開発スペース構築を快適にする"},{"content":"","href":"/tags/neovim/","title":"Neovim"},{"content":"","href":"/tags/shell/","title":"shell"},{"content":"","href":"/tags/tmux/","title":"tmux"},{"content":"","href":"/tags/vim/","title":"Vim"},{"content":"","href":"/tags/cloud-build/","title":"Cloud Build"},{"content":"","href":"/tags/cloud-functions/","title":"Cloud Functions"},{"content":"","href":"/tags/cloud-storage/","title":"Cloud Storage"},{"content":"GCPサービスの1つ、Cloud BuildはいわゆるCI/CDツールです。 GithubなどGitレポジトリに紐づけてトリガーさせて使うのが普通だと思います。UIから設定できるトリガーとしても現状、リポジトリ経由しか選択できません。\nしかし、業務のある都合でCloud Storage経由でデプロイしたいことがありまして。 やり方を模索してみてうまくいったので、メモっておきます。\nソース こちらに置いてます。\nabekoh/gcp-deploy-from-storage\n全体像 今回はhello-funcというファンクションを、tar.gzに圧縮したソースからCloud Functionsにデプロイするというシナリオとします。 デプロイ対象はApp Engineとか、別のサービスでもいけるはず。\nデプロイ対象 シンプルにHTTPリクエストおくるとHelloが返ってくるFunctionです。Node.jsで書きます。\n// index.js exports.hello = (req, res) =\u0026gt; { res.send(\u0026#39;Hello, world!\u0026#39;); } これと、npm initで生成したpackage.jsonを含んだhello-func.tar.gzを作っておきます。\ntar zcvf hello-func.tar.gz index.js package.json ビルドファンクション実装 メインとなるビルド用ファンクションです。\nStorageのイベントをトリガーとして発火させ、Cloud BuildのAPIを叩いてビルド、デプロイを実行します。\nNode.js用のGoogle APIクライアントとして、普通はこちらを使いますが\ngooglespis/google-api-nodejs-client\nREADMEにも書かれている通り、GCP上で利用する場合は下記のライブラリのほうが使い勝手いいみたいです。\ngoogleapis/google-cloud-node\nCloud Buildの依存を追加します。\nnpm init npm i -S @google-cloud/cloudbuild ビルド用Functionsの実装はこちら。\n// index.js \u0026#39;use strict\u0026#39;; const {CloudBuildClient} = require(\u0026#39;@google-cloud/cloudbuild\u0026#39;); exports.build = async file =\u0026gt; { // file.metageneration: メタ情報が更新されるとインクリメントされる値  // ファイル自体が更新されるときは\u0026#39;1\u0026#39;となる  if (file.metageneration !== \u0026#39;1\u0026#39;) { return; } // Promiseを返却することで、解決させてfunctionsが終了する  return new CloudBuildClient().createBuild({ projectId: process.env.GCP_PROJECT_ID, build: { source: { storageSource: { // バケット名  bucket: file.bucket, // ファイル名  object: file.name } }, steps: [ { \u0026#34;name\u0026#34;: \u0026#34;gcr.io/cloud-builders/gcloud\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;functions\u0026#34;, \u0026#34;deploy\u0026#34;, \u0026#34;hello-func\u0026#34;, \u0026#34;--entry-point=hello\u0026#34;, \u0026#34;--runtime=nodejs10\u0026#34;, \u0026#34;--memory=128MB\u0026#34;, \u0026#34;--region=us-central1\u0026#34;, \u0026#34;--trigger-http\u0026#34; ] } ] } }); }; createBuildというメソッドで、任意のオプションからCloud Buildを起動させます。 このリクエストではリポジトリだけでなくCloud Storageを指定することでき、今回やりたかったことが達成できます。\nまた、リクエストにプロジェクトIDを含める必要があります。 Node.js 8系までは GCP_PROJECT という環境変数で取得できたようですが、Node.js 10系では取得できなくなったようです。\n環境変数の使用 | Google Cloud Functions に関するドキュメント\n仕方ないので、デプロイ時のコマンドラインで指定することにしました。 以下のコマンドでbuild-funcをデプロイします。\ngcloud functions deploy build-func \\  --entry-point=build \\  --runtime=nodejs10 \\  --memory=256MB \\  --region=us-central1 \\  --trigger-bucket=src-func \\  --set-env-vars GCP_PROJECT_ID={GCPプロジェクト名} --trigger-bucketには、デプロイしたいファイルを置くバケットを指定します。\nCloud Buildの権限設定 Cloud Buildを使って対象を初めてデプロイする場合、権限設定が必要です。 今回はCloud Functionsをデプロイするのでその開発者と、サービスアカウントユーザーが必要なので付与します。\n動作確認 準備が整ったところで、Storageの対象バケットにアップロードしてみます。\ngsutil cp hello-func.tar.gz gs://src-func/hello-func.tar.gz このように、正常hello-funcがデプロイされました。\nまとめ ちょっと面倒ではありますが、ちょっと工夫するだけで実現できたので良かったです。 こんな感じで、トリガーに設定できなくてもAPIが存在すればFunctionsでなんとかなるってことは他にもあるかもですね。\n","href":"/post/gcp-deploy-functions-from-storage/","title":"Cloud Storage経由でCloud Buildを動かしてデプロイする"},{"content":"","href":"/tags/gcp/","title":"GCP"},{"content":"","href":"/tags/node.js/","title":"Node.js"},{"content":"Oreillyから出てる『開眼！ JavaScript ――言語仕様から学ぶJavaScriptの本質』の読書メモです。\nhttps://www.oreilly.co.jp/books/9784873116211/\n仕事でもWebフロントアプリを触ることがあるものの、既存のコードを雰囲気で改修する程度で、今ひとつJSの挙動など理解できていなかったのでその辺りが知りたく。 ちょうどこの本が「JavaScript特有の癖、落とし穴」にフォーカスを当てていて、大変参考になりました。\n以下、刺さったところの個人的メモ。\nJSは基本なんでもオブジェクト、プリミティブでもオブジェクトのように扱える number, string, boolean, null, undefinedはプリミティブ、他はすべてオブジェクト扱い。 Array、Functionも結局Objectを着色したようなイメージ。\nプリミティブであっても、それに対応するラッパーオブジェクト(numberならNumber)のプロパティ、メソッドが呼び出せる。呼び出したとき、そのときだけオブジェクトを生成→破棄という流れになる。\n\u0026#39;hoge\u0026#39;.length // -\u0026gt; 4 JSのオブジェクトはミュータブル、基本なんでも挙動変えられる Arrayなどネイティブコンストラクタを持つオブジェクトであっても、windowなどグローバルオブジェクトであっても、そのプロパティ・メソッドは書き換え可能。 window.alert()でも書き換えて機能停止させることも可能。varつけずfoo = 'bar'とやればグローバルオブジェクトのプロパティをいじったことになる。\nもちろん、可能なだけで破壊的な変更は推奨されない。\nthisはそれを呼び出すタイミングで指すものが決まる var foo = \u0026#39;foo\u0026#39;; var myObject = { foo: \u0026#39;I am myObject.foo\u0026#39; }; var sayFoo = function() { console.log(this[\u0026#39;foo\u0026#39;]); }; // myObjectのsayFooメソッドにsayFoo()関数を与える myObject.sayFoo = sayFoo; myObject.sayFoo(); // myObject.sayFoo()内でのthisはmyObjectなので\u0026#39;I am myObject.foo\u0026#39;を出力 sayFoo(); // sayFoo()内でのthisはグローバルオブジェクトなので\u0026#39;foo\u0026#39;を出力 (P.87より引用)\n定義時の\u0026rsquo;foo\u0026rsquo;が常に出ると予想されるかもだが、実際は実行時のコンテキストに依存する。\n無名関数の即時実行 (function(){ console.log(\u0026#39;hoge\u0026#39;); })() functionの中身を即実行する書き方。 何度かこんなコードみたことあったのに、意味理解できていなかった。。\n関数の巻き上げ function後ろのほうで定義、前のほうで実行でも問題なし。\nfoo(); // -\u0026gt; hoge function foo() { console.log(\u0026#39;hoge\u0026#39;); } これを関数の巻き上げと呼ぶ。JS特有ですね。 関数内で外側の変数つかってたりすると引っかかりそう。 (参考: やっとわかったjsの「巻き上げ」 - Qiita)\nコンストラクタのprototypeはインスタンスでは__proto__で参照できる Chrome Developer Toolsでオブジェクトについてる__proto__プロパティ、正体はそれを生成したコンストラクタのprototypeへの参照でした。 要するに、myObj.__proto__とmyObj.constructor.prototypeは同じものを指す。\nこの仕様は標準ではないらしい、けれど殆どのブラウザで機能している。\nnumberのラッパーオブジェクトのメソッド呼び出し 本文に直接無い内容だけど、自分理解のため。 数字をカンマ区切りにするとき、toLocalString()が使えるけど実際どう呼び出すんだろって色々ためすと\n10000.toLocalString() // -\u0026gt; エラー \u0026#39;10000\u0026#39;.toLocalString() // -\u0026gt; \u0026#39;10000\u0026#39; 10000..toLocaleString() // -\u0026gt; \u0026#39;10,000\u0026#39; (10000).toLocaleString() // \u0026#39;10,000\u0026#39; Number(10000).toLocaleString() // -\u0026gt; \u0026#39;10,000\u0026#39; new Number(10000).toLocaleString() // -\u0026gt; \u0026#39;10,000\u0026#39; var a = 10000 a.toLocaleString() // -\u0026gt; \u0026#39;10,000\u0026#39; という具合。10000.toLocalString()だと数値として評価できていない。 3行目の..となるのは、最初のドットは小数点として評価されるため。\nその他  プロトタイプチェーンについて図も使ってかなりじっくり解説されてわかりやすかった。ブログにまとめるの大変なので割愛。\n(Web記事だとこちらがわかりやすそう: や\u0026hellip;やっと理解できた！JavaScriptのプロトタイプチェーン) 便利ライブラリとしてUnderscore.jsが紹介されているが、今だとLodashのほうが主流かな？ Math.PIといった定数は変更不可。円周率3にできたりしない。  感想 他にも色々へぇ〜となるポイントだらけでした。業務だとTypeScriptだけど、こういう癖をうまく吸収したりしてくれて助かっている反面、やっぱりきちんと理解しておかないと詰まりそうだなーという点が多々。非常に勉強になりました。\nそれなりにフロントも見れるように、さらにJS勉強していきたい所存です。\n","href":"/post/javascript-enlightenment/","title":"『開眼! JavaScript』読んだ"},{"content":"","href":"/tags/%E8%AA%AD%E6%9B%B8/","title":"読書"},{"content":"12/18に開催されたSpring Fest 2019に参加してきました。 その時聞いたものについてのレポートです。\n基調講演：From Spring Boot 2.2 to Spring Boot 2.3 スライド\nSpring Boot 2.2での目玉機能、2.3で追加される予定のもの、Spring Cloudについての紹介でした。 気になったものいくつか取り上げます。\nHealth Indicator Group ヘルスチェックのエンドポイントを複数、グループ別で設定できる機能。\nmanagement.endpoint.health.group.liveness.include=ping management.endpoint.health.group.readiness.include=db,redis ↑の設定の場合、 /actguator/health/livenessと/actuator/health/redinessが提供される。\nサンプルの設定どおり、KubernetesのLiveness/Readiness Probeと相性よさげ。\nImmutable Configuration Properties コンストラクタインジェクションでCongiurationPropertiesが設定可能に。 →Setter不要。\nまたKotlinだとdata classにも適用できるとか。\nGraalVM Javaだけどネイティブアプリ化させたりできるやつ。 昨年のSpring Festでは出たばっかりのころだったけど、順調にサポートが厚くなってきている感じ。\n2020年に出るSpring 5.3になると、諸々設定が楽になるとのこと。\nCloud Native Buildpacks ソースコードを解析してOCI標準イメージを作成するツール。\n(OCI標準イメージとは、Open Container Initiativeが定めた標準仕様に沿ったコンテナイメージのこと。 https://www.publickey1.jp/blog/17/open_container_initiativeoci_v10.html)\npackというCLI使って簡単に試せる。\nhttps://github.com/buildpacks/pack\n特にKubernetes向けの場合、kpackというのも提供されている。 https://github.com/pivotal/kpack\nSpring Boot爆速開発超絶技巧 スライド\nひたすらIntelliJのショートカット・機能を紹介していただくというセッション。 結構知らないショートカットもあって為になりました。\n使えそうと思ったのが、breakpointのオプション。 「この条件に一致したらbreak」とか「breakせずにprintだけ行う」とかできる、知らなかった。。\nLINE公式アカウントのチャットシステムにおけるSpringおよびWebFluxの活用事例 スライド\nSpring WebFluxを実際にプロダクトに適用した事例紹介。\nWebFluxを利用することで、各リクエストをノンブロッキングで処理することで、1つのイベントループスレッドで複数リクエストを捌けるようになる。そしてサーバー数が減少につながる。\n実際うまく稼働できているとのこと。このあたり理解が浅いと感じたので、実際に触ってみようと思います。\nNissanConnectの舞台裏で動くSpring Boot／Spring Cloud 〜Microserviceの実運用の事例〜 スライド\n日産車とスマホアプリなどとを連携するシステムの裏側紹介と、Springに関するTips紹介でした。\nTipsで引っかかりそうと思ったのが、pacheHttpClientのデフォルト接続数問題。\nデフォルトだと同一ドメインに対して同時リクエスト2つまでしかできないので、maxConnPerRouteを設定する必要があるとのこと。実際ぶち当たると苦戦しそうですね。。\nSpring Developer のための コンテナ入門 Google Cloudさんによる、コンテナ、Kubernetesについて入門的な内容でした。\nここで紹介されていた、Jibはかなり使えそうな印象。\nhttps://github.com/GoogleContainerTools/jib\nJavaアプリのコンテナイメージを、Dockerfileいらずで作ってくれる優れもの。 Mavenプラグインも用意されていて、mvnコマンドだけでdocker build, docker pushまでできるみたい。 CI/CDでも設定削減できたり相性よさそうな気がします。\nQuarkus による超音速な Spring アプリケーション開発 スライド\nRedHatさんによるQuarkusの紹介でした。\nQuarkusとは、Kubernetesなどのコンテナ環境に最適化されたJavaアプリを実現するフレームワークのこと。\nフレームワーク起動時に、設定ファイル解析、クラスパス・クラスのスキャン、リフレクションの準備などJava実行時に毎回行う、時間かかるやつを一度だけ行うようにして、起動時間短縮・メモリ使用量削減につなげている。\nまた、従来のJITコンパイラ向けでも、GraalVMでネイティブイメージ向けにも両方利用できて、両方ともそれなりに恩恵を受けられるとのこと。\nEfficient Web Apps with Spring Boot 2 その場でSpring MVC -\u0026gt; Spring WebFluxに置き換えるライブコーディングでした。\n非同期化することでUI表示が目に見えて速くなるのが面白かった。\nSpring with React for Enterprise Application スライド\n業務アプリについて、変化できるUI、変化に強いシステムを作り上げる手法について、タグバンガーズさんがやっていることの紹介でした。\n イベントストーミングというモデリング手法の利用。「何が起こったか」「なぜ起こったか」といったことを付箋に書き、それらの関係性をホワイトボードに書いていって、境界づけなど行ってモデリングしていく手法。シンプルでとっつきやすそうでした。 UIではCSS-in-JSを利用。CSSがどう継承しているかとか分からなくなる事態を防ぐ。JSにうまく組み込むことでコンポーネントごとに管理できるように。 BEでは、イベントストーミングで分離した対象それぞれ、Springのエコシステムどれ使うか？を考える。それぞれ境界間の関係性に最適なのを選んでいく。 テストも、付箋の「○○ならば××」というのをそのままテストにできる。 結合テストのモック化は、Spring Cloud Contract, Pactの組み合わせがおすすめとのこと。  実際業務アプリ開発に多く関わっているので、参考にしてみたい部分が多くありました。\n全体通しての感想 今回よく聞いたキーワードとしては\u0026quot;Reactive\u0026quot;と\u0026quot;Native Image\u0026quot;ですかね。 どちらもCloud Nativeの流れに沿うようJava, Springを発展させようという動きなのでしょうか。\nまた個人的には、昨年に比べて「これ業務に活かせそう」という観点ができて楽しかったです。また来年も来よう。あと月次でやってるようなイベントにも参加してみたい所存です。\n","href":"/post/spring-fest-2019/","title":"Spring Fest 2019 参加レポート"},{"content":"","href":"/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/","title":"勉強会"},{"content":"","href":"/tags/go/","title":"Go"},{"content":"Google PhotosのAPIつかって自動アップロードするバッチつくってみたくて調べたところ、 GCPサービスみたくサービスアカウント使う、ってことはできないみたいだった\nhttps://developers.google.com/photos/library/guides/authentication-authorization#service-accounts\nOAuth 2.0の認証フローをたどる必要があるみたい。\nとはいえバッチつくるとき、初回のみ認証→次からはrefresh tokenで再利用という流れになるんだろうけど 初回のみ認証の実装をケチりたかったので、refresh token取得まで簡単に取得できるツールみたいなの書いてみた。\nabekoh/get-google-tokens\n GCPサイドバー-\u0026gt;APIとサービス-\u0026gt;認証情報 より、認証情報を作成-\u0026gt;OAuthクライアントID を選択 用途に応じた種類を選ぶ。任意の名前をつける。JS生成元・リダイレクトURIは http://localhost:8080 を指定  認証情報一覧から、ダウンロードボタンを押す。client_secret_XXX.apps.googleusercontent.com..jsonのようなjsonファイルが手に入る。 token取得ツールインストール  go get github.com/abekoh/get-google-tokens 次を実行。例では、Google Photos APIにアップロードする権限のみ。  get-google-tokens -json client_secret_XXX.apps.googleusercontent.com.json -scope https://www.googleapis.com/auth/photoslibrary.appendonly photoのスコープはここ参照 https://developers.google.com/photos/library/guides/authentication-authorization\n実行するとURLが表示されるので、アクセス。そしてスコープを許可。「このアプリは確認されていません」と表示されても進める。 リダイレクトされてlocalhostに移った後、ターミナルのほうを確認。Access TokenとRefresh Tokenが表示されている。  仕組みとしては、リダイレクト時にURLパラメータにcode=と認証コードが入るので、 それをWebサーバで受け取って、チャンネル送信して、POSTリクエストでトークン取得するという流れ。\nGo久しぶり書きましたが、こんな感じでWebサーバー立ち上げ簡単にできる点、CLI化も楽な点がよいですね。\n参考  Google API OAuth2.0のアクセストークン\u0026amp;リフレッシュトークン取得手順 2017年2月版 - Qiita  ","href":"/post/get-google-token-with-go/","title":"Google API の OAuth 2.0トークン取得するツールつくった"},{"content":"","href":"/tags/google-photos/","title":"Google Photos"},{"content":"","href":"/tags/circleci/","title":"CircleCI"},{"content":"","href":"/tags/github-pages/","title":"Github Pages"},{"content":"","href":"/tags/google-domains/","title":"Google Domains"},{"content":"","href":"/tags/hugo/","title":"Hugo"},{"content":"このブログの構築メモ。 やっぱりブログもGitHubで管理できたらいいなーと探したら、この組み合わせで簡単にいい感じにできそうだったのでやってみた。\nHugoとは https://gohugo.io/\nGo製の静的サイト生成ツール。 とにかく簡単にブログがつくれる。ブログじゃなくてもポートフォリオサイトやOSSプロジェクトページなんかもいける。\nMarkdownでかけるのも嬉しい。非常にGitHubフレンドリーな感じ。\n個人的に惜しいと思う点は、超スタンダードな感じのテーマの多くがGPLなところ。 編集中のはPrivateにする場合ここが引っかかってしまうので、なくなくそれらを弾いてテーマ選びました。\nとりあえずこれを無編集で使ってます。\nhttps://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme\n→ これに変更しました https://github.com/achary/engimo\n構成 Github Pagesの機能をつかって公開するんですが、Hugoのソース自体はPrivateで管理。 abekoh.github.ioにはCircleCIがmaster pushするだけ。\nCircleCI選んだ理由は、とりあえず有名でモダンなやつ試したかったから。 最近だとGithub Actionsがよかったかな、と後から思ったけどまぁいいか。\nCircleCI設定 hugoのビルドは、Orbがあったのでそれを使う。 Orbはビルド手順のテンプレートみたいなの。\nhttps://circleci.com/orbs/registry/orb/circleci/hugo\nその後、Github Pagesへのpushは手動で設定。 このあたり参考にさせていただきました。\n CircleCIでgithub pagesに自動デプロイする CircleCIでHugoを実行してGitHub Pagesにデプロイ  引っかかったのが、ssh鍵設定してもcloneできない問題。 こちら参考に、StrictHostKeyChecking=noにすれば解決しました。\n最終的に.circleci/config.ymlはこんな感じ。 なれてきたらまた直していきたい。\nversion: 2.1 orbs: hugo: circleci/hugo@0.4.1 jobs: deploy: docker: - image: cibuilds/base steps: - add_ssh_keys: # CirlceCIのSSH Permissionsに設定したSSH Keyのfingerprintを設定 fingerprints: - \u0026#34;SO:ME:FIN:G:ER:PR:IN:T\u0026#34; # ビルドしたworkspaceをもってくる - attach_workspace: at: . - deploy: name: deploy to Github Pages command: |# ssh警告無視 echo \u0026#34;HostName github.com\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config echo \u0026#34;StrictHostKeyChecking no\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config DEPLOY_DIR=deploy # USER_EMAILはCircleCIのEnvironment Variablesで設定 git config --global user.email $USER_EMAIL git config --global user.name $CIRCLE_USERNAME git clone git@github.com:abekoh/abekoh.github.io.git $DEPLOY_DIR cd $DEPLOY_DIR rm -vrf ./* cp -v -R ../public/* ./ # ドメイン設定 echo \u0026#34;blog.abekoh.dev\u0026#34; \u0026gt; CNAME git add -f . git commit -m \u0026#34;Deploy #$CIRCLE_BUILD_NUM from CircleCI [ci skip]\u0026#34; git push origin master -f workflows: version: 2.1 main: jobs: - hugo/build: # TODO: HTMLチェックをonに html-proofer: false # masterマージ時のみデプロイ - deploy: requires: - hugo/build filters: branches: only: master ドメイン設定 ついでにドメインも取得してみたので設定。\nGoogle Domainsで、devドメインつくりました。 年間1200円、安いですね。\nこのようにCNAME設定して、\nabekoh/abekoh.github.ioのSettingsでドメイン設定するだけ。\nなお、CNAMEファイルがpush時に毎回消えてしまうような設定になっているので、.cricleci/config.ymlのpipelineのとおりCNAMEを毎回作成するようにしています。\n感想 やっぱりGitHub上で完結できるのよいですね。書きたいネタをIssueに登録、PR作って解決という流れで一人で運用ができて楽しい。\n","href":"/post/how-to-build-this-blog/","title":"Hugo, Github Pages, CircleCIつかってブログ構築"},{"content":"以前Qiitaに投稿した記事の紹介。\n記事: Slackでスニペットを共有するためのVimプラグインつくってみた\nGitHub: abekoh/snipslack.vim\nVimからSlackのスニペットに、お手軽にポストできるプラグインつくってみた記事です。\n2018年の会社の新卒有志Advent Calendarに参加して書きました。\nVimmerとしては一度はプラグインつくってみたい、そんな意欲で書きました。\nVim Scriptにしっかり向き合えて楽しかった。正規表現とか結構独特。業務などに役立つかはさておき。\n作ったものの、実は最近はあまり自分でも使っていない。。\n社内独自のスニペットサービスが使い勝手優秀で、結局それに頼っています。\n","href":"/post/qiita-snipslack-vim/","title":"[Qiita] Slackでスニペットを共有するためのVimプラグインつくってみた"},{"content":"","href":"/tags/slack/","title":"Slack"},{"content":"","href":"/tags/diary/","title":"diary"},{"content":"","href":"/categories/diary/","title":"diary"},{"content":"技術ブログはじめました。\n黙々と勉強しつつもアウトプットの機会もなく、なんだかもったいないと思いはじめまして、 今度こそと続けていきたい所存です。\nこのブログはHugoっていう静的ページエンジンでつくってみました。\nすべてGithub上で解決するのは良いですね。\nCI連携などもまぁいい感じに設定できたので、そのこともおいおい記そうかと思います。\nどうぞよろしくお願いいたします。\n","href":"/post/start-blog/","title":"ブログはじめました"},{"content":"Profile 名前: abekoh\n福岡出身、東京在住。\n某Web系企業で、Web広告関係のエンジニアやってます。\nメインで扱う言語はJavaです。\n学生時代は画像系の機械学習とかやってました。\n特にGAN (Generative Adversarial Nets)に注力していました。\nTopics 業務であつかうもの:\nJava, Spring Boot, TypeScript, AngularJS, Kubernetes, Cloud Foundry, Kafka, Oracle Database, MySQL, IntelliJ IDEA\n興味あるもの:\nGo, Kotlin, DDD, Vim, GCP, 自作キーボード\nPrivacy Policy 当ブログでは、利用状況を把握するためにGoogle Analyticsを利用しております。Google AnalyticsはCookieを利用して利用者の情報を収集します。Google Analyticsにおいてデータが収集、処理される仕組みについては、こちらをご参照ください。\n","href":"/about/","title":"About"},{"content":"","href":"/search/","title":""},{"content":"","href":"/series/","title":"Series"}]
