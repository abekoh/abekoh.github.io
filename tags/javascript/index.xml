<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on abekoh&#39;s tech note</title>
    <link>https://blog.abekoh.dev/tags/javascript/</link>
    <description>Recent content in JavaScript on abekoh&#39;s tech note</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 2019 abekoh</copyright>
    <lastBuildDate>Sun, 08 Mar 2020 23:30:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.abekoh.dev/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Storage経由でCloud Buildを動かしてデプロイする</title>
      <link>https://blog.abekoh.dev/post/gcp-deploy-functions-from-storage/</link>
      <pubDate>Sun, 08 Mar 2020 23:30:00 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/gcp-deploy-functions-from-storage/</guid>
      <description>GCPサービスの1つ、Cloud BuildはいわゆるCI/CDツールです。 GithubなどGitレポジトリに紐づけてトリガーさせて使うのが普通だと思います。UIから設定できるトリガーとしても現状、リポジトリ経由しか選択できません。
しかし、業務のある都合でCloud Storage経由でデプロイしたいことがありまして。 やり方を模索してみてうまくいったので、メモっておきます。
ソース こちらに置いてます。
abekoh/gcp-deploy-from-storage
全体像 今回はhello-funcというファンクションを、tar.gzに圧縮したソースからCloud Functionsにデプロイするというシナリオとします。 デプロイ対象はApp Engineとか、別のサービスでもいけるはず。
デプロイ対象 シンプルにHTTPリクエストおくるとHelloが返ってくるFunctionです。Node.jsで書きます。
// index.js exports.hello = (req, res) =&amp;gt; { res.send(&amp;#39;Hello, world!&amp;#39;); } これと、npm initで生成したpackage.jsonを含んだhello-func.tar.gzを作っておきます。
tar zcvf hello-func.tar.gz index.js package.json ビルドファンクション実装 メインとなるビルド用ファンクションです。
Storageのイベントをトリガーとして発火させ、Cloud BuildのAPIを叩いてビルド、デプロイを実行します。
Node.js用のGoogle APIクライアントとして、普通はこちらを使いますが
googlespis/google-api-nodejs-client
READMEにも書かれている通り、GCP上で利用する場合は下記のライブラリのほうが使い勝手いいみたいです。
googleapis/google-cloud-node
Cloud Buildの依存を追加します。
npm init npm i -S @google-cloud/cloudbuild ビルド用Functionsの実装はこちら。
// index.js &amp;#39;use strict&amp;#39;; const {CloudBuildClient} = require(&amp;#39;@google-cloud/cloudbuild&amp;#39;); exports.build = async file =&amp;gt; { // file.metageneration: メタ情報が更新されるとインクリメントされる値  // ファイル自体が更新されるときは&amp;#39;1&amp;#39;となる  if (file.</description>
    </item>
    
    <item>
      <title>『開眼! JavaScript』読んだ</title>
      <link>https://blog.abekoh.dev/post/javascript-enlightenment/</link>
      <pubDate>Sun, 23 Feb 2020 18:20:11 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/javascript-enlightenment/</guid>
      <description>Oreillyから出てる『開眼！ JavaScript ――言語仕様から学ぶJavaScriptの本質』の読書メモです。
https://www.oreilly.co.jp/books/9784873116211/
仕事でもWebフロントアプリを触ることがあるものの、既存のコードを雰囲気で改修する程度で、今ひとつJSの挙動など理解できていなかったのでその辺りが知りたく。 ちょうどこの本が「JavaScript特有の癖、落とし穴」にフォーカスを当てていて、大変参考になりました。
以下、刺さったところの個人的メモ。
JSは基本なんでもオブジェクト、プリミティブでもオブジェクトのように扱える number, string, boolean, null, undefinedはプリミティブ、他はすべてオブジェクト扱い。 Array、Functionも結局Objectを着色したようなイメージ。
プリミティブであっても、それに対応するラッパーオブジェクト(numberならNumber)のプロパティ、メソッドが呼び出せる。呼び出したとき、そのときだけオブジェクトを生成→破棄という流れになる。
&amp;#39;hoge&amp;#39;.length // -&amp;gt; 4 JSのオブジェクトはミュータブル、基本なんでも挙動変えられる Arrayなどネイティブコンストラクタを持つオブジェクトであっても、windowなどグローバルオブジェクトであっても、そのプロパティ・メソッドは書き換え可能。 window.alert()でも書き換えて機能停止させることも可能。varつけずfoo = &#39;bar&#39;とやればグローバルオブジェクトのプロパティをいじったことになる。
もちろん、可能なだけで破壊的な変更は推奨されない。
thisはそれを呼び出すタイミングで指すものが決まる var foo = &amp;#39;foo&amp;#39;; var myObject = { foo: &amp;#39;I am myObject.foo&amp;#39; }; var sayFoo = function() { console.log(this[&amp;#39;foo&amp;#39;]); }; // myObjectのsayFooメソッドにsayFoo()関数を与える myObject.sayFoo = sayFoo; myObject.sayFoo(); // myObject.sayFoo()内でのthisはmyObjectなので&amp;#39;I am myObject.foo&amp;#39;を出力 sayFoo(); // sayFoo()内でのthisはグローバルオブジェクトなので&amp;#39;foo&amp;#39;を出力 (P.87より引用)
定義時の&amp;rsquo;foo&amp;rsquo;が常に出ると予想されるかもだが、実際は実行時のコンテキストに依存する。
無名関数の即時実行 (function(){ console.log(&amp;#39;hoge&amp;#39;); })() functionの中身を即実行する書き方。 何度かこんなコードみたことあったのに、意味理解できていなかった。。
関数の巻き上げ function後ろのほうで定義、前のほうで実行でも問題なし。
foo(); // -&amp;gt; hoge function foo() { console.</description>
    </item>
    
  </channel>
</rss>