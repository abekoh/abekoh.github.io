<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on abekoh&#39;s tech note</title>
    <link>https://blog.abekoh.dev/tags/java/</link>
    <description>Recent content in Java on abekoh&#39;s tech note</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 2019 abekoh</copyright>
    <lastBuildDate>Sun, 28 Jun 2020 15:08:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.abekoh.dev/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Maps APIをSpringで使ってみる</title>
      <link>https://blog.abekoh.dev/post/google-maps-api-with-spring/</link>
      <pubDate>Sun, 05 Apr 2020 23:43:00 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/google-maps-api-with-spring/</guid>
      <description>Google Mapsの場所情報が使えるPlaces APIを使ったアプリケーションを作ってみたく、実装ためしたメモ。
Google Maps API 単にGoogle Maps APIといってもその用途によって、ドキュメントや料金体系が別れている。
ドキュメント一覧はここで、目的に合ったAPIを選ぶ。 https://developers.google.com/maps/documentation
料金についてはここ。記事を書いている時点で、モバイル向けマップ表示は無料だったり、ある道路の制限速度を取得するAPIは1000件あたり$20と細かい。1ヶ月$200までは無料で使える。
https://cloud.google.com/maps-platform/pricing/
今回はPlaces API for Webを使ってみる。指定した場所周辺の飲食店一覧や、その飲食店のレビュー情報なんかが取得できる。
Places APIの中でも、場所を探す、場所の詳細情報を取得する、その周辺の写真を取得する、で料金体系が違うので注意。
APIの有効化 ここに書いてあるとおり順にやってく。
https://developers.google.com/places/web-service/get-api-key
手順通り進めたら、API Keyが発行できる。このキーをクエリパラメータに含めるなどして扱う。
発行できたらcurlつかってテスト。
curl &amp;#34;https://maps.googleapis.com/maps/api/place/nearbysearch/json?key={replace your API Key}&amp;amp;location=35.6812362,139.7649361&amp;amp;radius=100&amp;amp;language=ja&amp;amp;keyword=ramen&amp;#34; 上記はNearby Searchを使って、東京駅周辺半径100mで、キーワード&amp;quot;ramen&amp;quot;でお店を探すサンプル。
ドキュメントに書かれているとおり、API Keyには利用元の制限をかけるべき。IPアドレスやリファラなどで設定可能。
実装 Java向け公式のクライアントがあったのでそれ利用。
https://github.com/googlemaps/google-maps-services-java
依存を追加。
// build.gradle.kts dependencies { implementation(&amp;#34;com.google.maps:google-maps-services:0.11.0&amp;#34;) } 使い方は次のような感じ。
// https://github.com/googlemaps/google-maps-services-java/blob/master/README.md より GeoApiContext context = new GeoApiContext.Builder() .apiKey(&amp;#34;AIza...&amp;#34;) .build(); GeocodingResult[] results = GeocodingApi.geocode(context, &amp;#34;1600 Amphitheatre Parkway Mountain View, CA 94043&amp;#34;).await(); Gson gson = new GsonBuilder().</description>
    </item>
    
    <item>
      <title>Spring Fest 2019 参加レポート</title>
      <link>https://blog.abekoh.dev/post/spring-fest-2019/</link>
      <pubDate>Mon, 30 Dec 2019 02:05:02 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/spring-fest-2019/</guid>
      <description>12/18に開催されたSpring Fest 2019に参加してきました。 その時聞いたものについてのレポートです。
基調講演：From Spring Boot 2.2 to Spring Boot 2.3 スライド
Spring Boot 2.2での目玉機能、2.3で追加される予定のもの、Spring Cloudについての紹介でした。 気になったものいくつか取り上げます。
Health Indicator Group ヘルスチェックのエンドポイントを複数、グループ別で設定できる機能。
management.endpoint.health.group.liveness.include=ping management.endpoint.health.group.readiness.include=db,redis ↑の設定の場合、 /actguator/health/livenessと/actuator/health/redinessが提供される。
サンプルの設定どおり、KubernetesのLiveness/Readiness Probeと相性よさげ。
Immutable Configuration Properties コンストラクタインジェクションでCongiurationPropertiesが設定可能に。 →Setter不要。
またKotlinだとdata classにも適用できるとか。
GraalVM Javaだけどネイティブアプリ化させたりできるやつ。 昨年のSpring Festでは出たばっかりのころだったけど、順調にサポートが厚くなってきている感じ。
2020年に出るSpring 5.3になると、諸々設定が楽になるとのこと。
Cloud Native Buildpacks ソースコードを解析してOCI標準イメージを作成するツール。
(OCI標準イメージとは、Open Container Initiativeが定めた標準仕様に沿ったコンテナイメージのこと。 https://www.publickey1.jp/blog/17/open_container_initiativeoci_v10.html)
packというCLI使って簡単に試せる。
https://github.com/buildpacks/pack
特にKubernetes向けの場合、kpackというのも提供されている。 https://github.com/pivotal/kpack
Spring Boot爆速開発超絶技巧 スライド
ひたすらIntelliJのショートカット・機能を紹介していただくというセッション。 結構知らないショートカットもあって為になりました。
使えそうと思ったのが、breakpointのオプション。 「この条件に一致したらbreak」とか「breakせずにprintだけ行う」とかできる、知らなかった。。
LINE公式アカウントのチャットシステムにおけるSpringおよびWebFluxの活用事例 スライド
Spring WebFluxを実際にプロダクトに適用した事例紹介。
WebFluxを利用することで、各リクエストをノンブロッキングで処理することで、1つのイベントループスレッドで複数リクエストを捌けるようになる。そしてサーバー数が減少につながる。
実際うまく稼働できているとのこと。このあたり理解が浅いと感じたので、実際に触ってみようと思います。
NissanConnectの舞台裏で動くSpring Boot／Spring Cloud 〜Microserviceの実運用の事例〜 スライド</description>
    </item>
    
  </channel>
</rss>