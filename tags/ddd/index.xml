<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD on abekoh&#39;s tech note</title>
    <link>https://blog.abekoh.dev/tags/ddd/</link>
    <description>Recent content in DDD on abekoh&#39;s tech note</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 2019 abekoh</copyright>
    <lastBuildDate>Mon, 11 Jan 2021 22:30:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.abekoh.dev/tags/ddd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Actions &#43; PlantUMLでドメインモデルの管理を楽にする</title>
      <link>https://blog.abekoh.dev/post/plantuml-action/</link>
      <pubDate>Mon, 11 Jan 2021 22:30:00 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/plantuml-action/</guid>
      <description>ドメインモデルの図を複数人、エンジニア・ドメインエキスパート間で共有するにあたって、 やり方はいろいろ考えられますが、
 差分がわかりやすい バージョン管理ができる  という点からやはりGitで管理できると嬉しいと思います。
Gitで管理しやすいフォーマットとして、DSLから図を自動生成してくれるPlantUMLが使いやすく定番です。 ドメインモデルについては下図のようにオブジェクト図で書けるとよいかと思います。
(『実践ドメイン駆動設計』 P.356, 図10-7をもとに作成)
このPlantUMLによるドメインモデルの管理をGitHubのPR上で効率行えるようにするための、Github Actionsのテンプレを開発しMarketplaceに公開しました。
Generate and Commit PlantUML Diagrams · Actions · GitHub Marketplace
使い方などはREADMEを参考に。使い勝手は以下のサンプルPRを見ていただければわかりやすいと思います。
Example by abekoh · Pull Request #33 · abekoh/commit-plantuml-action
.pumlファイルに差分が生じたとき、同じところに.pngとして画像が生成され、コミットされます。
さらにenableReviewCommentを有効にすれば、生成された図のリンクとプレビューがコメントに投稿されます。 Beforeを展開して古い図との差分も確認可能です。
毎回リンクをたどってレビューを行う必要がなく、使い勝手よく扱えると思います。
注意点としては、PlantUMLが依存しているgraphvizの影響でライセンスがGPLとなっている点です…
このあたりのPlantUMLの別実装を使ってより緩いライセンス使えないか、模索していきたいところ。</description>
    </item>
    
    <item>
      <title>[Qiita] トランザクションスクリプトなシステムをもとに、Cleanなシステムを構築する</title>
      <link>https://blog.abekoh.dev/post/advent-calendar-2020-ddd/</link>
      <pubDate>Mon, 21 Dec 2020 20:39:03 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/advent-calendar-2020-ddd/</guid>
      <description>ドメイン駆動設計 Advent Calendar 2020 に参加しました。
トランザクションスクリプトなシステムをもとに、Cleanなシステムを構築する - Qiita</description>
    </item>
    
    <item>
      <title>「ドメイン駆動設計」関連書籍の紹介・オススメの読み順</title>
      <link>https://blog.abekoh.dev/post/ddd-books/</link>
      <pubDate>Sun, 18 Oct 2020 02:58:00 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/ddd-books/</guid>
      <description>社内LT会の好評だったところ一部抜粋。
DDD関連の本を読み漁って、それぞれの感想一言メモと、どの順で読んだらいいか考えてみたやつを紹介。
戦略的設計と戦術的設計 この記事でDDDの内容にはちゃんと触れないけどこの点だけ説明。
DDDの考え方、パターンは数あれど、それらは 「戦略的設計」と「戦術的設計」に分類することができる。 関連書籍はこのどちらかに偏っていることが多い。
戦略的設計 &amp;hellip; チームで使うパターン。よりマネジメント向き。
戦術的設計 &amp;hellip; テクニカルなパターン。具体的なクラス設計とか。
お硬めの2冊 エリック・エヴァンスのドメイン駆動設計 原著: 2003年、訳書: 2011年発行
Evans本。原著。古い箇所もあるけどすべてが詰まっている。
レビューなどで「抽象的でわかりにくい」ってコメントが多くて身構えていたけど、思ってたより具体的な例も出てきて楽しめた。 (ある程度DDDに関する知識蓄えてからってのが大きいけど。)
実践ドメイン駆動設計 原著: 2013年、訳書: 2015年発行
IDDD本。Evans本からより実践方面に落とし込んだもの。戦術的設計が多め。
Evans本にはない概念も登場する。(ドメインイベントあたり)
「Evans本よりこの本から読んだほうがとっつきやすい」ってコメントがいくつかあったのでここから入ったけど、Evans本の内容が前提として扱われているので割と辛い。
やわらかめ3冊 わかる！ドメイン駆動設計 ～もちこちゃんの大冒険～ 2016年発行
同人誌。ほぼ戦略的設計のみ扱う。
Evans本、IDDD本を引用しつつゆるふわに解説されててとっつきやすい。
ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本 2020年発行
今年出たばかりの本。戦術的設計中心。
DDDで使われるパターンをいきなりコードで説明する感じで、具体的でイメージがすぐに掴める。
初学者の「DDD難しそう辛そう」というイメージを解きほぐすような解説がとてもよかった。 C#だけどJava知ってたら違和感ない内容だった。
「実践ドメイン駆動設計」から学ぶDDDの実装入門 2019年発行
IDDD本の副読本。もともとCodeZineの連載物で、Amazonでオンデマンドで印刷できるやつ。 構成はIDDD本と全く同じで、一緒に読み進めるとよさそう。
読み順について 読みやすさ、扱う内容でマッピングして、個人的おすすめな読み順をつけるとこんな感じ。
ドメイン駆動設計入門がとにかくわかりやすく、「DDD頑張れそう」って勇気もらえるからここからがオススメ。戦術的設計に偏ってるので、その後はもちこちゃんで戦略的設計を掴む。
そこからEvans本→IDDD本(副読本も一緒がいいかも？)という流れで、頭悩ませながら読むのがよいんじゃないかなって思う。
まとめ これで僕は完全に理解しました。エンジニア的な意味でです。
業務などでの実践面はまだまだなのでﾁｮｯﾄﾃﾞｷﾙようになりたいです。</description>
    </item>
    
  </channel>
</rss>