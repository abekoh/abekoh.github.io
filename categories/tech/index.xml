<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on abekoh&#39;s tech note</title>
    <link>https://blog.abekoh.dev/categories/tech/</link>
    <description>Recent content in tech on abekoh&#39;s tech note</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© abekoh</copyright>
    <lastBuildDate>Sat, 21 Dec 2019 13:52:48 +0900</lastBuildDate>
    
	<atom:link href="https://blog.abekoh.dev/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google API の OAuth 2.0トークン取得するツールつくった</title>
      <link>https://blog.abekoh.dev/post/get-google-token-with-go/</link>
      <pubDate>Sat, 21 Dec 2019 13:52:48 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/get-google-token-with-go/</guid>
      <description>Google PhotosのAPIつかって自動アップロードするバッチつくってみたくて調べたところ、 GCPサービスみたくサービスアカウント使う、ってことはできないみたいだった
https://developers.google.com/photos/library/guides/authentication-authorization#service-accounts
OAuth 2.0の認証フローをたどる必要があるみたい。
とはいえバッチつくるとき、初回のみ認証→次からはrefresh tokenで再利用という流れになるんだろうけど 初回のみ認証の実装をケチりたかったので、refresh token取得まで簡単に取得できるツールみたいなの書いてみた。
abekoh/get-google-tokens
 GCPサイドバー-&amp;gt;APIとサービス-&amp;gt;認証情報 より、認証情報を作成-&amp;gt;OAuthクライアントID を選択 用途に応じた種類を選ぶ。任意の名前をつける。JS生成元・リダイレクトURIは http://localhost:8080 を指定  認証情報一覧から、ダウンロードボタンを押す。client_secret_XXX.apps.googleusercontent.com..jsonのようなjsonファイルが手に入る。 token取得ツールインストール  go get github.com/abekoh/get-google-tokens 次を実行。例では、Google Photos APIにアップロードする権限のみ。  get-google-tokens -json client_secret_XXX.apps.googleusercontent.com.json -scope https://www.googleapis.com/auth/photoslibrary.appendonly photoのスコープはここ参照 https://developers.google.com/photos/library/guides/authentication-authorization
実行するとURLが表示されるので、アクセス。そしてスコープを許可。「このアプリは確認されていません」と表示されても進める。 リダイレクトされてlocalhostに移った後、ターミナルのほうを確認。Access TokenとRefresh Tokenが表示されている。  仕組みとしては、リダイレクト時にURLパラメータにcode=と認証コードが入るので、 それをWebサーバで受け取って、チャンネル送信して、POSTリクエストでトークン取得するという流れ。
Go久しぶり書きましたが、こんな感じでWebサーバー立ち上げ簡単にできる点、CLI化も楽な点がよいですね。
参考  Google API OAuth2.0のアクセストークン&amp;amp;リフレッシュトークン取得手順 2017年2月版 - Qiita  </description>
    </item>
    
    <item>
      <title>Hugo, Github Pages, CircleCIつかってブログ構築</title>
      <link>https://blog.abekoh.dev/post/how-to-build-this-blog/</link>
      <pubDate>Sat, 14 Dec 2019 13:40:05 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/how-to-build-this-blog/</guid>
      <description>このブログの構築メモ。 やっぱりブログもGitHubで管理できたらいいなーと探したら、この組み合わせで簡単にいい感じにできそうだったのでやってみた。
Hugoとは https://gohugo.io/
Go製の静的サイト生成ツール。 とにかく簡単にブログがつくれる。ブログじゃなくてもポートフォリオサイトやOSSプロジェクトページなんかもいける。
Markdownでかけるのも嬉しい。非常にGitHubフレンドリーな感じ。
個人的に惜しいと思う点は、超スタンダードな感じのテーマの多くがGPLなところ。 編集中のはPrivateにする場合ここが引っかかってしまうので、なくなくそれらを弾いてテーマ選びました。
とりあえずこれを無編集で使ってます。
https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme
→ これに変更しました https://github.com/achary/engimo
構成 Github Pagesの機能をつかって公開するんですが、Hugoのソース自体はPrivateで管理。 abekoh.github.ioにはCircleCIがmaster pushするだけ。
CircleCI選んだ理由は、とりあえず有名でモダンなやつ試したかったから。 最近だとGithub Actionsがよかったかな、と後から思ったけどまぁいいか。
CircleCI設定 hugoのビルドは、Orbがあったのでそれを使う。 Orbはビルド手順のテンプレートみたいなの。
https://circleci.com/orbs/registry/orb/circleci/hugo
その後、Github Pagesへのpushは手動で設定。 このあたり参考にさせていただきました。
 CircleCIでgithub pagesに自動デプロイする CircleCIでHugoを実行してGitHub Pagesにデプロイ  引っかかったのが、ssh鍵設定してもcloneできない問題。 こちら参考に、StrictHostKeyChecking=noにすれば解決しました。
最終的に.circleci/config.ymlはこんな感じ。 なれてきたらまた直していきたい。
version: 2.1 orbs: hugo: circleci/hugo@0.4.1 jobs: deploy: docker: - image: cibuilds/base steps: - add_ssh_keys: # CirlceCIのSSH Permissionsに設定したSSH Keyのfingerprintを設定 fingerprints: - &amp;#34;SO:ME:FIN:G:ER:PR:IN:T&amp;#34; # ビルドしたworkspaceをもってくる - attach_workspace: at: . - deploy: name: deploy to Github Pages command: | # ssh警告無視 echo &amp;#34;HostName github.</description>
    </item>
    
    <item>
      <title>[Qiita] Slackでスニペットを共有するためのVimプラグインつくってみた</title>
      <link>https://blog.abekoh.dev/post/qiita-snipslack-vim/</link>
      <pubDate>Wed, 11 Dec 2019 23:52:09 +0900</pubDate>
      
      <guid>https://blog.abekoh.dev/post/qiita-snipslack-vim/</guid>
      <description>以前Qiitaに投稿した記事の紹介。
記事: Slackでスニペットを共有するためのVimプラグインつくってみた
GitHub: abekoh/snipslack.vim
VimからSlackのスニペットに、お手軽にポストできるプラグインつくってみた記事です。
2018年の会社の新卒有志Advent Calendarに参加して書きました。
Vimmerとしては一度はプラグインつくってみたい、そんな意欲で書きました。
Vim Scriptにしっかり向き合えて楽しかった。正規表現とか結構独特。業務などに役立つかはさておき。
作ったものの、実は最近はあまり自分でも使っていない。。
社内独自のスニペットサービスが使い勝手優秀で、結局それに頼っています。</description>
    </item>
    
  </channel>
</rss>